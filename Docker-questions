1.How do you limit the resources (CPU and memory) that a docker container can use?
--> root@ip-172-31-15-80:~# docker run -d --cpus="1" -m 100m httpd

2.How shall you disable the Networking stock on a container?
--> root@ip-172-31-15-80:~# docker run -d --network none httpd

3.Can you explain the different volume mount types available in Docker?
--> 2 types of volume mount :- 1. Bind mount [ root@ip-172-31-15-80:~# mkdir bind
                                               root@ip-172-31-15-80:~# cd bind
                                               root@ip-172-31-15-80:~/bind# vi index.html
                                               root@ip-172-31-15-80:~/bind# cd
                                               root@ip-172-31-15-80:~# docker container run -d -p 80:80 -v /root/bind/:/usr/local/apache2/htdocs --name bind-cont httpd ]
                               2. local mount [ root@ip-172-31-15-80:~# docker container run -d -p 80:80 -v local:/usr/local/apache2/htdocs --name local-cont httpd
                                                root@ip-172-31-15-80:~# cd /var/lib/docker/volumes/local/_data/
                                                root@ip-172-31-15-80:/var/lib/docker/volumes/local/_data# ls
                                                        index.html
                                                root@ip-172-31-15-80:/var/lib/docker/volumes/local/_data# cat index.html
                                                       <html><body><h1>It works!</h1></body></html> ]

4.What is the role of .dockerignore file?
5.Why build cache in docker is so important?

6.When you restart the docker service, all your container goes down, so how you will overcome this problem?
--> root@ip-172-31-15-80:~# docker run --restart always -d httpd
                            docker container inspect <container-id>

7.How will you configure the docker client separately from the docker host/server?
-->  root@ip-172-31-15-80:~# sudo nano /lib/systemd/system/docker.service
{ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock} REPLACE WITH {ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --containerd=/run/containerd/containerd.sock}
     root@ip-172-31-15-80:~# sudo systemctl daemon-reload
     root@ip-172-31-15-80:~# sudo systemctl restart docker
     root@ip-172-31-15-80:~# ss -tulnp | grep dockerd
                     tcp   LISTEN 0      4096                   *:2375            *:*    users:(("dockerd",pid=12687,fd=4))
     root@ip-172-31-15-80:~# docker info

8.Configure SSL in Apache Container.
9.Deploy multiple MySQL containers and configure NFS on diff. storage server with mount point /data on localhost.

10.How can we run 2 services in a single container like Apache and MySQL?
-->root@ip-172-31-15-80:~# vi Dockerfile [  FROM ubuntu:latest
                                            # Install Apache and MySQL
                                            RUN apt-get update && apt-get install -y apache2 mysql-server
                                            # Copy and set entrypoint script
                                            COPY start.sh /start.sh
                                            RUN chmod +x /start.sh
                                            # Expose ports
                                            EXPOSE 80 3306
                                            CMD ["/start.sh"] ]
  root@ip-172-31-15-80:~# vi start.sh [ #!/bin/bash
                                        service apache2 start
                                        service mysql start
                                        tail -f /dev/null ]
  root@ip-172-31-15-80:~# docker build -t apache-mysql .
  root@ip-172-31-15-80:~# docker run -d -p 80:80 -p 3306:3306 apache-mysql

11.Create an image from the above running container and push it into DockerHub as a public image.
--> root@ip-172-31-15-80:~# docker commit condescending_kepler my-apache-mysql
    root@ip-172-31-15-80:~# docker tag my-apache-mysql ambikaaj/my-apache-mysql:latest
    root@ip-172-31-15-80:~# docker login
    Login Succeeded
    root@ip-172-31-15-80:~# docker push ambikaaj/my-apache-mysql:latest

12. Restart the docker service and now remove all the stopped containers without using the 'rm' command.
--> root@ip-172-31-15-80:~# systemctl restart docker
    root@ip-172-31-15-80:~# docker container prune

13.Check the resource utilization of all the containers in the docker host.
--> docker container inspect <containr-id> OR docker stats

14.Create an N/W with 192.168.0.0/16 subnet and create 2 containers in default and created N/W respectively and make sure only these 2 containers can communicate.
--> root@ip-172-31-6-23:~# docker network create --subnet=192.168.0.0/16 custom_network
    root@ip-172-31-6-23:~# docker run -itd --name default-cont ubuntu:latest
    root@ip-172-31-6-23:~# docker run -itd --name custom-cont --net custom_network ubuntu:latest
    root@ip-172-31-6-23:~# docker network connect custom_network default-cont
    root@ip-172-31-6-23:~# docker exec -it default-cont bash
     root@2b4e5be00b6e:/# ping --version
     root@2b4e5be00b6e:/# apt update && apt install -y iputils-ping
  [ Ctrl+p+q ]
    root@ip-172-31-6-23:~# docker exec -it default-cont ping -c 3 custom-cont

15.Create a private Registry server and push any images to that and create a container from pushed images.
--> root@ip-172-31-15-80:~# docker run -d -p 5000:5000 --name private-registry registry:2
    root@ip-172-31-15-80:~# docker tag ambikaaj/my-apache-mysql:latest localhost:5000/my-apache-mysql
    root@ip-172-31-15-80:~# docker image ls
             localhost:5000/my-apache-mysql   latest    9b940b094473 
    root@ip-172-31-15-80:~# docker push localhost:5000/my-apache-mysql
    root@ip-172-31-15-80:~# curl -X GET http://localhost:5000/v2/_catalog
             {"repositories":["my-apache-mysql"]}
    root@ip-172-31-15-80:~# docker run -d -p 8080:80 localhost:5000/my-apache-mysql
    root@ip-172-31-15-80:~# curl -I http://localhost:8080
            HTTP/1.1 200 OK

16.Create an image of nginx with the help of Dockerfile and application container run on 8087 port.
--> root@ip-172-31-15-80:~# mkdir nginx-docker
    root@ip-172-31-15-80:~# cd nginx-docker/
    root@ip-172-31-15-80:~/nginx-docker# nano Dockerfile [ # Use the official NGINX base image
                                                          FROM nginx:latest
                                                          # Copy a custom index.html to the container
                                                          COPY index.html /usr/share/nginx/html/index.html
                                                          # Expose port 80 inside the container
                                                          EXPOSE 80
                                                          # Start NGINX
                                                          CMD ["nginx", "-g", "daemon off;"]  ]
    root@ip-172-31-15-80:~/nginx-docker# nano index.html [ <!DOCTYPE html>
                                                           <html lang="en">
                                                           <head>
                                                              <meta charset="UTF-8">
                                                              <meta name="viewport" content="width=device-width, initial-scale=1.0">
                                                              <title>Welcome to NGINX</title>
                                                           </head>
                                                           <body>
                                                              <h1>Hello, this is a custom NGINX page!</h1>
                                                           </body>
                                                           </html>  ]
    root@ip-172-31-15-80:~/nginx-docker# cd
    root@ip-172-31-15-80:~# docker build -t my-nginx .
    root@ip-172-31-15-80:~# docker run -d -p 8087:80 --name nginx-container my-nginx
    root@ip-172-31-15-80:~# curl -I http://localhost:8087
               HTTP/1.1 200 OK

!!! THE END !!!
